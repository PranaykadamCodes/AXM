// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String
  role         String         @default("employee") // "admin" | "employee"
  department   String?
  position     String?
  status       String         @default("pending")   // "active" | "pending" | "inactive"
  deviceToken  String?        // Push notifications
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  attendance   Attendance[]
  leaveRequests LeaveRequest[]
  reviewedLeaveRequests LeaveRequest[] @relation("ReviewedBy")
  wfhRequests  WFHRequest[]
  reviewedWFHRequests WFHRequest[] @relation("WFHReviewedBy")
  nfcTags     NFCTag[]

  @@map("users")
}

model Attendance {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  type      String   // "IN" | "OUT"
  method    String   // "QR" | "NFC" | "RFID"
  token     String?  // qr token or tag uid
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())

  @@map("attendance")
}

model LeaveRequest {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String    // "vacation" | "sick" | "personal" | "emergency"
  startDate     DateTime
  endDate       DateTime
  reason        String
  status        String    @default("pending") // "pending" | "approved" | "rejected"
  adminComments String?
  reviewedAt    DateTime?
  reviewedBy    String?
  reviewer      User?     @relation("ReviewedBy", fields: [reviewedBy], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("leave_requests")
}

model WFHRequest {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date          DateTime  // Single date for WFH
  reason        String
  status        String    @default("pending") // "pending" | "approved" | "rejected"
  adminComments String?
  reviewedAt    DateTime?
  reviewedBy    String?
  reviewer      User?     @relation("WFHReviewedBy", fields: [reviewedBy], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("wfh_requests")
}

model NFCTag {
  id         String   @id @default(uuid())
  uid        String   @unique
  label      String
  location   String?
  isActive   Boolean  @default(true)
  createdBy  String
  creator    User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@map("nfc_tags")
}